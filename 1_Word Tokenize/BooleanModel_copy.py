# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'wt_gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.uic import loadUi
from PyQt5.QtWidgets import QFileDialog, QMessageBox, QAction, QMainWindow, QSlider, QPushButton, QToolTip, QApplication, QTableWidgetItem
from Sastrawi.Stemmer.StemmerFactory import StemmerFactory

import os
import re
import pandas as pd

class Ui_MainWindow(QMainWindow):

    def __init__(self):

        QMainWindow.__init__(self)
        loadUi('wt_gui.ui', self)

        # Declare Variables
        self.counter = 1
        self.listFile = []
        self.split_words = []
        self.list_stopwords = []
        self.stopped_words = []
        self.stemmed_words = []

        # Declare Function
        self.btnAdd.clicked.connect(self.doWhat)
        self.btnDel.clicked.connect(self.deleteFile)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Sistem Temu Kembali Informasi"))
        self.labelJudul.setText(_translate("MainWindow", "Boolean Model"))
        self.LabelNama1.setText(_translate("MainWindow", "I Putu Bayu Adhya Wiratama (1905551059)"))
        self.LabelNama2.setText(_translate("MainWindow", "Ida Ayu Oka Dewi Cahyani (1905551146)"))
        self.LabelNama3.setText(_translate("MainWindow", "Dwi Ahmad Dzulhijjah (2105551162)"))
        self.btnAdd.setText(_translate("MainWindow", "+ Add Document"))
        self.btnDel.setText(_translate("MainWindow", "- Delete Document"))

    def openFile(self):

        # Open File
        self.fileName, fileType = QFileDialog.getOpenFileName(self.centralwidget, "Open File", "", "*.txt;;All Files(*)")
        filename = os.path.basename(self.fileName)
        self.listDokumen.addItem('{}. {}'.format(self.counter, filename))
        self.listFile.append(self.fileName)

        self.counter += 1

    def tokenize(self):

        # Tokenizing words
        with open(self.fileName, 'r') as namaFile:
            for content in namaFile:
                content = content.lower()
                content = re.split(r'\W+', content)
                
                self.split_words.extend(content)
                self.split_words = list(dict.fromkeys(self.split_words))

        self.split_words.sort()

    def removeStopwords(self):

        # Stopwords
        stopwords_path = 'stopwords_pilkada.csv'

        df = pd.read_csv(stopwords_path)
        for item in df['ada']:
            self.list_stopwords.append(item)
        
        self.stopped_words = self.split_words
        for x in self.stopped_words:
            if x in self.list_stopwords:
                self.stopped_words.remove(x)
        
    def stemming(self):

        # Stemming
        factory = StemmerFactory()
        stemmer = factory.create_stemmer()

        for item in self.stopped_words:
            stemming = stemmer.stem(item)
            self.stemmed_words.append(stemming)
            
        self.stemmed_words = list(dict.fromkeys(self.stemmed_words))
        self.stemmed_words.sort()

    def printIndex(self):

        # Printing
        self.listIndex.clear()

        for item in self.stemmed_words:
            exist_file = list()
            for data in self.listFile:
                with open(data, 'r') as namaFile:
                    for isi in namaFile:
                        isi = isi.lower()
                        if item in isi:
                            exist_file.append(os.path.basename(data))
                            exist_file = list(dict.fromkeys(exist_file))
            self.listIndex.addItem('{}\t: <{}>'.format(item, exist_file))

    def doWhat(self):
        self.openFile()
        self.tokenize()
        self.removeStopwords()
        self.stemming()
        self.printIndex()

    def deleteFile(self):
        self.counter = 1
        self.listDokumen.clear()
        self.listIndex.clear()
        self.listFile.clear()
        self.split_words.clear()
        self.list_stopwords.clear()
        self.stopped_words.clear()
        self.stemmed_words.clear()

app = QApplication([])
window = Ui_MainWindow()
window.show()
app.exec_()

